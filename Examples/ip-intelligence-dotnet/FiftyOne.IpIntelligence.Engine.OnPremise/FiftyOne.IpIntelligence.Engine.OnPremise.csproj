<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Platforms>x64;ARM64</Platforms>
    <EnableUnmanagedDebugging>true</EnableUnmanagedDebugging>
    <DocumentationFile>FiftyOne.IpIntelligence.Engine.OnPremise.xml</DocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    
    <!-- NuGet package properties -->
    <PackageId>FiftyOne.IpIntelligence.Engine.OnPremise</PackageId>
    <Title>On-premise IP intelligence service for the 51Degrees Pipeline API</Title>
    <Description>The 51Degrees Pipeline API provides a fast, modern architecture for consuming real-time digital data services. IP intelligence will provide detailed information about about the source IP address of the requests that were received by your website or service, such as location, Autonomous System Number and etc.</Description>
    <Authors>51Degrees Engineering</Authors>
    <PackageLicenseExpression>EUPL-1.2</PackageLicenseExpression>
    <PackageIconUrl>https://51degrees.com/portals/0/Logos/Square%20Logo.png?width=64</PackageIconUrl>
    <Copyright>51Degrees Mobile Experts Limited</Copyright>
    <PackageTags>51degrees,pipeline,data service,ip intelligence,ip address</PackageTags>
    <RepositoryUrl>https://github.com/51Degrees/ip-intelligence-dotnet</RepositoryUrl>
    <PackageProjectUrl>www.51degrees.com</PackageProjectUrl>
    <RepositoryType>git</RepositoryType>
    <PackageIcon>51d-logo.png</PackageIcon>
    <NeutralLanguage>en</NeutralLanguage>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

    <!-- GitHub CI -->
    <BuiltOnCI>false</BuiltOnCI>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DefineConstants>$(DefineConstants);FIFTYONE_DEGREES_LARGE_DATA_FILE_SUPPORT</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DefineConstants>$(DefineConstants);FIFTYONE_DEGREES_LARGE_DATA_FILE_SUPPORT</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM64'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="3.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- 
    Debug or Release are the only two outputs from the CMake / PreBuild.ps1 
    scripts. The $Configuration parameter might contain a wider range of options
    which will always in the string Debug or Release. The following sets a new
    parameter called BuildType to Debug or Release based on the content of the
    $Configuration parameter. This is then used to choose the target compiled
    binary.
  -->
  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(Configuration)', 'Debug'))">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <BuildType>Debug</BuildType>
  </PropertyGroup>
  <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(Configuration)', 'Release'))">
    <BuildType>Release</BuildType>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="build\**" />
    <Compile Remove="ip-intelligence-cxx\**" />
    <EmbeddedResource Remove="build\**" />
    <EmbeddedResource Remove="ip-intelligence-cxx\**" />
    <None Remove="build\**" />
    <None Remove="ip-intelligence-cxx\**" />
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Remove=".editorconfig" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(ProjectDir)\build\windows\$(Platform)\$(BuildType)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('Windows')) AND '$(Platform)' != 'AnyCPU'" Link="FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="$(ProjectDir)\build\linux\$(Platform)\$(BuildType)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('Linux')) AND '$(Platform)' != 'AnyCPU'" Link="FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="$(ProjectDir)\build\macos\$(Platform)\$(BuildType)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('OSX')) AND '$(Platform)' != 'AnyCPU'" Link="FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Include="..\Images\51d-logo.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include=".editorconfig" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\FiftyOne.IpIntelligence.Shared\FiftyOne.IpIntelligence.Shared.csproj" />
  </ItemGroup>

  <!-- Package files to add to the NuGet package when packaging -->
  <ItemGroup>
    <!-- Package the .targets file which copies the DLLs in Framework projects -->
    <_PackageFiles Include="FiftyOne.IpIntelligence.Engine.OnPremise.targets">
      <BuildAction>None</BuildAction>
      <PackagePath>build</PackagePath>
    </_PackageFiles>

    <!-- GitHub CI -->
    <!-- Copy the Windows x64 native DLL -->
    <_PackageFiles Include="..\windows\x64\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\win-x64\native</PackagePath>
    </_PackageFiles>
    <!-- Copy the Linux x64 native DLL -->
    <_PackageFiles Include="..\linux\x64\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\linux-x64\native</PackagePath>
    </_PackageFiles>
    <!-- Copy the Mac x64 native DLL -->
    <_PackageFiles Include="..\macos\x64\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\osx-x64\native</PackagePath>
    </_PackageFiles>
    <!-- Copy the Mac arm64 native DLL -->
    <_PackageFiles Include="..\macos\arm64\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\osx-arm64\native</PackagePath>
    </_PackageFiles>

    <!-- Direct pack -->
    <!-- Copy the Windows x64 native DLL -->
    <_PackageFiles Include="$(OutputPath)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('Windows')) AND !$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\win-x$(Platform)\native</PackagePath>
    </_PackageFiles>
    <!-- Copy the Linux x64 native DLL -->
    <_PackageFiles Include="$(OutputPath)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('Linux')) AND !$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\linux-$(Platform)\native</PackagePath>
    </_PackageFiles>
    <!-- Copy the Mac x64/arm64 native DLL -->
    <_PackageFiles Include="$(OutputPath)\FiftyOne.IpIntelligence.Engine.OnPremise.Native.dll" Condition="$([MSBuild]::IsOsPlatform('OSX')) AND !$(BuiltOnCI)">
      <BuildAction>None</BuildAction>
      <PackagePath>runtimes\osx-$(Platform)\native</PackagePath>
    </_PackageFiles>
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Condition="'$(Platform)' != 'AnyCPU'">
    <Exec Command="pwsh $(ProjectDir)PreBuild.ps1 -BuildType $(BuildType) -Arch $(Platform)" />
  </Target>

</Project>
