//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FiftyOne.IpIntelligence.Engine.OnPremise.Interop {

internal class EngineIpiSwig : EngineBaseSwig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EngineIpiSwig(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EngineIpiSwig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(EngineIpiSwig obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IpIntelligenceEngineModulePINVOKE.delete_EngineIpiSwig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public EngineIpiSwig(string fileName, ConfigIpiSwig config, RequiredPropertiesConfigSwig properties) : this(IpIntelligenceEngineModulePINVOKE.new_EngineIpiSwig__SWIG_0(fileName, ConfigIpiSwig.getCPtr(config), RequiredPropertiesConfigSwig.getCPtr(properties)), true) {
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public EngineIpiSwig(byte[] data, int length, ConfigIpiSwig config, RequiredPropertiesConfigSwig properties) : this(IpIntelligenceEngineModulePINVOKE.new_EngineIpiSwig__SWIG_1(data, length, ConfigIpiSwig.getCPtr(config), RequiredPropertiesConfigSwig.getCPtr(properties)), true) {
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override Date getPublishedTime() {
    Date ret = new Date(IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_getPublishedTime(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Date getUpdateAvailableTime() {
    Date ret = new Date(IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_getUpdateAvailableTime(swigCPtr), true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getDataFilePath() {
    string ret = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_getDataFilePath(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getDataFileTempPath() {
    string ret = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_getDataFileTempPath(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void refreshData() {
    IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_refreshData__SWIG_0(swigCPtr);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void refreshData(string fileName) {
    IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_refreshData__SWIG_1(swigCPtr, fileName);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void refreshData(byte[] data, int length) {
    IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_refreshData__SWIG_2(swigCPtr, data, length);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public ResultsIpiSwig process(EvidenceIpiSwig evidence) {
    global::System.IntPtr cPtr = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_process__SWIG_0(swigCPtr, EvidenceIpiSwig.getCPtr(evidence));
    ResultsIpiSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsIpiSwig(cPtr, true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultsIpiSwig process(string ipAddress) {
    global::System.IntPtr cPtr = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_process__SWIG_1(swigCPtr, ipAddress);
    ResultsIpiSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsIpiSwig(cPtr, true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResultsIpiSwig process(byte[] ipAddress, int length, IpTypeSwig type) {
    global::System.IntPtr cPtr = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_process__SWIG_2(swigCPtr, ipAddress, length, (int)type);
    ResultsIpiSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsIpiSwig(cPtr, true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ResultsBaseSwig processBase(EvidenceBaseSwig evidence) {
    global::System.IntPtr cPtr = IpIntelligenceEngineModulePINVOKE.EngineIpiSwig_processBase(swigCPtr, EvidenceBaseSwig.getCPtr(evidence));
    ResultsBaseSwig ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResultsBaseSwig(cPtr, true);
    if (IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Pending) throw IpIntelligenceEngineModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
